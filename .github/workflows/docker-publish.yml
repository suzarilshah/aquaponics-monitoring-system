name: Docker Image CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_SERVER: ${{ github.repository }}-server
  IMAGE_NAME_CLIENT: ${{ github.repository }}-client

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v3
    
    - name: Log in to the Container registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata (tags, labels) for Server
      id: meta-server
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_SERVER }}
        tags: |
          type=ref,event=branch
          type=sha,format=short
          latest
    
    - name: Extract metadata (tags, labels) for Client
      id: meta-client
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_CLIENT }}
        tags: |
          type=ref,event=branch
          type=sha,format=short
          latest
    
    - name: Build and push Server image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta-server.outputs.tags }}
        labels: ${{ steps.meta-server.outputs.labels }}
    
    - name: Build and push Client image
      uses: docker/build-push-action@v4
      with:
        context: ./client
        file: ./client/Dockerfile
        push: true
        tags: ${{ steps.meta-client.outputs.tags }}
        labels: ${{ steps.meta-client.outputs.labels }}
    
    - name: Create docker-compose.github.yml
      run: |
        cat > docker-compose.github.yml << EOL
        version: '3.8'

        services:
          client:
            image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_CLIENT }}:latest
            ports:
              - "80:80"
            depends_on:
              - server
            restart: always
            healthcheck:
              test: ["CMD", "curl", "-f", "http://localhost"]
              interval: 30s
              timeout: 10s
              retries: 3
              start_period: 40s

          server:
            image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_SERVER }}:latest
            ports:
              - "6789:6789"
            environment:
              - FLASK_ENV=production
              - O1_API_KEY=\${O1_API_KEY}
              - DEEPSEEK_API_KEY=\${DEEPSEEK_API_KEY}
            volumes:
              - aquaponics_data:/app/data
              - aquaponics_logs:/app/logs
            restart: always
            healthcheck:
              test: ["CMD", "curl", "-f", "http://localhost:6789/health"]
              interval: 30s
              timeout: 10s
              retries: 3
              start_period: 40s

        volumes:
          aquaponics_data:
          aquaponics_logs:
        EOL
    
    - name: Upload docker-compose.github.yml as artifact
      uses: actions/upload-artifact@v3
      with:
        name: docker-compose
        path: docker-compose.github.yml
